22 aug 2010

trying to get DataMapper working. it's a database wrapper/helper thing for ruby.

it's definately easier than using a database directly.. but. it's a LEAKY ABSTRACTION.

partly, it's about defining the semantics of a data structure, to be queryable.

thats the *relational* in relational database.

and databases... what do I think about databases? as computers go, they are practically IRON AGE. 
(not quite stoneage...but OLD)

what about a relational datastrucutre/persistance framework optomised for elegance? 
	(which may be backed by a DB - but totally hides it)

design for the more complicated relationships first, let simple stuff trail:

should be duck-typed, like ruby is.

many to many 
one to many 
one to one
primitive

databases use foriegn keys, and join tables.

	messy!

using DataMapper you have to say:

	Class Thing
		has n, :whatever
	end

~ and

	class Whatever
		belongs_to :thing
	end
	
	which make a pointer from Whatever back to Thing.
	this is echonomical, but confusing. - but you have to learn it because databases are everywhere.
	
what about just saying:

another important thing is whether Thing.whatever => Whatever means that Whatever.thing => Thing

(it's bidirectional)


~~~~~~~~~~~~~~~~~~~~~~~~
EVENTUALLY GOT HEAD AROUND DATAMAPPER. argh! the thing they neglected to mention is that 
local objects not update as you expect!

you have to call .reload !!!!

muther fucker! they could have mentioned something!
~~~~~~~~~~~~~~~~~~~~~~~~

okay. got the updated stuff in meta-modular. 
	~ it loads .rb and parses the classes, runs them through the tests.
	~ or loads the test, if it's a test.
	
	next: retrive good information from a test run... and display it.
	
	output
	error
	total time
	time for each test.
	each error.
	
	that will mean a test_function model
	
	----
	
	okay. getting meta-modular app going now...
	
	next is actually making it into a useful website... good workflow... good ways to view data.

	wishlist:
	
		1. writing code in-browser...
		2. code syntax hilighting	
		3. multiple users
		4. minimum clicks
		5. flash/textured/elegant look -- we're coding - so maybe something hi-contrast?
		6. ajax fields.
		
		the idea and my competence will bejudged on how the app looks and feels.
		
		maybe now is the time to check out Ruby on Rails?
		
	okay, I had a little look at RoR, decided it was quite complicated.  tried camping, decided it was too clever.
	
	#
	keep on going with sinatra, then deployed to H. nothing worked. begining to figure it out now, but, it's messy.
	
	I'll simplify the model: get rid of RbFile... just store the classes code in it - don't do files or monkey patching.
	enter code into a text field. emphasize small. maybe don't even allow requires?
	
	hmm. must give this a think - oh yeah, remember functions in class decs:
	
		class Page < R (...)
		
	what if it was
		
		class Something < couple (:some_special_test,...)
		
	next:
	
		Simplify heroku.
		compromise for ease
		instead of uploading files,
			enter code into a text box.
			
	got heroku working. but havn't done the "next" stuff yet.
			
	################################################################
			
		Hanging out with greg last night, playing around making a text adventure prototype
			
			
		could make it object orientated, and i think ruby could be very well suited to this,
		especially considering eval & heroku.
		
		the basic question is a parser. there are actions, look, go, use, take etc. which the player can do
		
		and each room contains a bunch of things. a room is a thing. other things can contain things, but may be
		too small to contain certain things. when you are in a room you can interact with the room or things in it...
		
		say: verb object
		
		#verbs are functions things have has... it simply looks through thier methods.
		
		object is things which are in the scene. the room, things in the room. possibly things in the things. the containers get to decide what sticks out.
		
		look object
		
		take object
		
		drop object
		
		put object container
		
		give object character
		
		use object object (key, lock... [direct object] [indirect object])
		
		refur to objects by thier class, or if it is ambigious, by there qualities 
		
		open red door
		open blue door
		use blue key blue door
		
		to make it simpler to parse:
		
		use blue-key blue-door
		
		what if there was a "blue" and a door so the parser didn't know if it said "use blue (on) door" or "use blue door"
		you could optionally include hyphens or (on,with,for,to to join direct object to in direct object)
		
		use as many qualities as necessary to make it unambigious:
		
		use big-blue-key etc...
		
		or
		
		use big key
		
		clearly, inside you use doors to go from room to room. outside you could use this also... but just have objects like paths
		
		north road, south road etc.
		
		"go south" would be unambigious.
		
	################################################################
	
	
	next steps:
	
		fit ruby code into atomic units with no il-defined outsite dependencies.
		
		all outside dependencies must be via couple
			couple 'test_name'/'class_name'
		3 levels of granularity:
			~ a method
			~ a class
			~ a module
			
		except for core or meta-modular objects, all dependencies must be from this.
			- boot strap couple as superclass later!
			
			-extract modules, classes and methods while parsing.
			-create web app text editor for editing objects.
			
			allow one block of code to contain multiple methods
			
	okay, got a text area running on localhost. 
	will try it on heroku
	
	also! stumbled upon way to remove constants.
		~ now since i've determined to have a well defined module and ban monkey patching, 
				then I think I could wrap every thing in a module and it will work.
				after testing I can remove the module... and put that module inside another one, with shadowed Kernel, etc.
				
	
	
	NEXT:
	~okay, I got a text editor pane. 
	~my interface is really combersome though. 
	~I should spend a few days tidying it up.
	
		@another big problem is the tester does not report the pass result properly!!!
	
		@it's says pass when there is a fail!
	
		@and the code editor doesn't update when you change the code...
				
==================================================================================================
		
		okay, I gotta nicen the interface, and organize the code which does that.
		
		maybe use a thing like my html_dsl but extend it to use higher level constructs... menus, (web) columns, back/forward
		login, signup, etc.
		
		organize my sinatra into something like MVC. I already have the M seperate. seperate V and C.
		
		... some sort of layout thing.
		
		... opperate at a higher level than <tags></tags>
		
		... more like: menu item,...
		
		page {
			header {
					title "HeLLo!"
			}
			columns (30,50){
				menu {
				link ...
				link ...
				link ...
				}
				contents {
					post {
					_ "here is a blog post."
					}						
				}
			}
		}
		
		
		is it better to generate the page as it goes, or store 
		everything and generate it on a call to .render or something?
		
		okay, I don't feel sure how to start with this so i'll build a hard wired prototype.
		
		
		realisticially, most websites have a
			header (with the site name and maybe menu *)
			a menu on left (probably with navigation of lesser important)
			possibly another on the right (probably with ads)
			and one last panel, in the middle with content.
			
			*sometime put the menu small and above the title.
			
			in some contexts you might drop the side menus or have 
			just one thing which is centered and takes up whole page, 
			google.com or twitter error page
			
			there are lots of different ways to implement those things 
			in html/css but that is basicially what your going to want.
			
		what i've got is a very basic version of that.
		it could certainly be expanded, and made more DSLish
		
		I've got a feeling though, that I should check out rails a bit
		more. even if I don't use it, might be good to know where everyone 
		else is coming from.
		
		just looked up adn realied it's nearly 1 AM.

		ported my layout thing into meta-modular. purple (visited) links 
		look like shit in that context... rubygems ain't got visited links.
			@ the table could be nicened.


		okay, what about something which can link back to the pages... 
		thats a controller's job, aint it?
		it'd remove a lot of the coupling from the views to the controllers.

		#############################
		every header/title should have a code to copy/paste into a couple('classname')
		
		and every page has a console in it?
		
		think about formats for navigating lots of technical information...
		#############################
		
		okay, next: port over the editor to using a layout. done.
		
		- being able to edit a particular file.
		- next is setting couple(...) back up. 
		- stripping out the need for 'require' from classes.
		- parsing methods and modules
		- then probably simplifying test writing.
		
		
		the idea is coming into place. it's becoming more about improving the interface. 

			even code libraries have a user interface. never forget that.
			
		
		splash page should have text field and half finished hello world or something... 
		I have a clear idea for user interface tests, but this same thing could be used to make developer interface tests.
		
		that means I need a user system.
		
		but first: editable anything.
			- it's very buggy. there are still problems with the database. it's not reporting pass/fail/error correctly.
			- my testing in this area is meagre. 
			- I should stop. and figure out how i'm going to test the website. i'll need to do that in the future anyway!
			
		problem just occued. writing code, code is getting so broard that 
		a single problem can manifest it self several ways.
		
		when TestAdaptableTest fails, it does not give an informative error message.
		also, I am not sure that the TestRun s are updating correctly.
		
		should I next write tests, or should i fix TestAdaptableTest? i've forgotton exactly what I was thinking when I had this thought.
		
		~~ I'm visiting Phil & Leanne at 6 so I think i'll just drop this for now.
		
		a key approch might be paul garaham's "write the language up 
		towards the problem" approch. i'd need a web framework dsl, and 
		a web test dsl.
		
		something which could check for a id'ed div with certain things 
		inside it would be enough for page reading, and then clicking 
		and checking behaviour.
		
		I should also apply rapid prototyping to this. 
		I think I can fix this problem with just more tests in TestModel2
		
		$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
		DISGRAM OF ADDITIONS AND DISCARDS RAPID/PROTOTYPE STUFF IN PROJECT SO FAR.
		$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
		
		+ i save code in web editor, it does not run all tests.
		+ I update code in editor, it does not update all tests... 
			- fixed this. there was a bug in tester/sandbox.
			
		okay, for links... I want to be able to say link (object) and have 
		it generate both the link and know where to take that.
		
		oh, you'd say link_to ObjectModel and it would make a link which took you to ObjectControler
		
		... I think rails has something like this...
		
		also, I need multiple actions for each object.
		say: new, edit, save, delete, show... show_brief, show_detailed...
		
		also: i want a nice templating system which will automaticially generate an interface with 
			header,content,left-menu,right-menu,footer resize appropiately when those arn't there, 
			and be coupled to a single parameter... not sure how well rails does this!
	
			so each object knows how to display itself, in different ways.
			
			so a post view could say:
				also, show comments...
				and call the comment view for a select group of comments.
				
		so the test for getting couple in there, is to be able to use it in a test, 
		so there are no other outside dependencies... (no require X)
		
		I need a test for Coupler. + with versions which cache responses on disk and in mem... hmm. 
		so it should try to couple a few gaurenteed things. TestPrimes... 
		and area few impossible things. like with MagicNumber[MANYRANDOMDIGITS] 
		the most basic one will just request from meta-modular.org, who cares. 
		more advances ones will cache locally or in mem.
		
		
		############################################################3
		
		GREAT IDEA TODAY
		
		make meta-modular download a gist and run it. it's a great way to store the code, 
		there is already syntax highlighting comments all that stuff!
		plus everyone already thinks github and gist is fantastic.
		
		edit the code in gist, c/p the url into another webpage, and run it.
		
		i've realised there is a free plan for mongoDB... so I might change to that.
		but the next thing, should be a Sinatra App to run gists.
		
		i'll want to protect the DB I should look at fakeFS (which makes an in mem file system
		
		
		======================================================
		
		okay, some more thinking out loud here: 
		
		it doesn't take much development with sinatra to run into a wall. 
		it's great for simple hello world stuff.
		but doing a proper page layout it isn't.
		
		what i really like about it is how you start with a completely blank file, and build it up.
		thats why I don't use rails. it's too fat.
		
		what I want from my microframework:
			replacable templates... with multiple panes...
			- thats the current obstical. 
			
		i've run into problems with markby. it runs it's blocks as instance_eval... 
		this means loads of weird DSL behaviour. it means you can't call functions properly,
		thats something I soon ditched with htmldsl...
		
		or maybe do i just need to create more Markaby::Builder.new....?
					
					
		what if you replaced self, 
		but saved the old self, 
		and when there was a missing method, 
		it called it on the old self?
		
		....
		
		
		
		pause to let it sink in.
		
		
		
		
		....
		
		
		maybe, i'll just fix markaby.
		


		I also really like the callbacks in Wee. is there a way to do that as well, but more RESTful?
		these tie in with routes?
		if i say a link has a callback then it gives the link a hash which references the block 
		and when the request comes back, it finds that callback and calls it.
		
		could do the same things for objects, which have state etc.
		but instead of the hash, there is a path which can contain a chain of statements.
		i.e. Post.get(12).show
		Post.get(12).comment(10).save
		Post.get(12).comment(10).title(title)
		
		these could be legal urls, so what if we just chain things together like this?
		
		you could even just eval the url. ha. or parse it to something stightly different
		post/get(10)/comment(10,10) blah.blah.blah
		
		this could definately be a way to do it.
		
		okay. just try callbacks first though!

22 aug 2010

trying to get DataMapper working. it's a database wrapper/helper thing for ruby.

it's definately easier than using a database directly.. but. it's a LEAKY ABSTRACTION.

partly, it's about defining the semantics of a data structure, to be queryable.

thats the *relational* in relational database.

and databases... what do I think about databases? as computers go, they are practically IRON AGE. 
(not quite stoneage...but OLD)

what about a relational datastrucutre/persistance framework optomised for elegance? 
	(which may be backed by a DB - but totally hides it)

design for the more complicated relationships first, let simple stuff trail:

should be duck-typed, like ruby is.

many to many 
one to many 
one to one
primitive

databases use foriegn keys, and join tables.

	messy!

using DataMapper you have to say:

	Class Thing
		has n, :whatever
	end

~ and

	class Whatever
		belongs_to :thing
	end
	
	which make a pointer from Whatever back to Thing.
	this is echonomical, but confusing. - but you have to learn it because databases are everywhere.
	
what about just saying:

another important thing is whether Thing.whatever => Whatever means that Whatever.thing => Thing

(it's bidirectional)


~~~~~~~~~~~~~~~~~~~~~~~~
EVENTUALLY GOT HEAD AROUND DATAMAPPER. argh! the thing they neglected to mention is that 
local objects not update as you expect!

you have to call .reload !!!!

muther fucker! they could have mentioned something!
~~~~~~~~~~~~~~~~~~~~~~~~

okay. got the updated stuff in meta-modular. 
	~ it loads .rb and parses the classes, runs them through the tests.
	~ or loads the test, if it's a test.
	
	next: retrive good information from a test run... and display it.
	
	output
	error
	total time
	time for each test.
	each error.
	
	that will mean a test_function model
	
	----
	
	okay. getting meta-modular app going now...
	
	next is actually making it into a useful website... good workflow... good ways to view data.

	wishlist:
	
		1. writing code in-browser...
		2. code syntax hilighting	
		3. multiple users
		4. minimum clicks
		5. flash/textured/elegant look -- we're coding - so maybe something hi-contrast?
		6. ajax fields.
		
		the idea and my competence will bejudged on how the app looks and feels.
		
		maybe now is the time to check out Ruby on Rails?
		
	okay, I had a little look at RoR, decided it was quite complicated.  tried camping, decided it was too clever.
	
	#
	keep on going with sinatra, then deployed to H. nothing worked. begining to figure it out now, but, it's messy.
	
	I'll simplify the model: get rid of RbFile... just store the classes code in it - don't do files or monkey patching.
	enter code into a text field. emphasize small. maybe don't even allow requires?
	
	hmm. must give this a think - oh yeah, remember functions in class decs:
	
		class Page < R (...)
		
	what if it was
		
		class Something < couple (:some_special_test,...)
		
	next:
	
		Simplify heroku.
		compromise for ease
		instead of uploading files,
			enter code into a text box.
			
	got heroku working. but havn't done the "next" stuff yet.
			
	################################################################
			
		Hanging out with greg last night, playing around making a text adventure prototype
			
			
		could make it object orientated, and i think ruby could be very well suited to this,
		especially considering eval & heroku.
		
		the basic question is a parser. there are actions, look, go, use, take etc. which the player can do
		
		and each room contains a bunch of things. a room is a thing. other things can contain things, but may be
		too small to contain certain things. when you are in a room you can interact with the room or things in it...
		
		say: verb object
		
		#verbs are functions things have has... it simply looks through thier methods.
		
		object is things which are in the scene. the room, things in the room. possibly things in the things. the containers get to decide what sticks out.
		
		look object
		
		take object
		
		drop object
		
		put object container
		
		give object character
		
		use object object (key, lock... [direct object] [indirect object])
		
		refur to objects by thier class, or if it is ambigious, by there qualities 
		
		open red door
		open blue door
		use blue key blue door
		
		to make it simpler to parse:
		
		use blue-key blue-door
		
		what if there was a "blue" and a door so the parser didn't know if it said "use blue (on) door" or "use blue door"
		you could optionally include hyphens or (on,with,for,to to join direct object to in direct object)
		
		use as many qualities as necessary to make it unambigious:
		
		use big-blue-key etc...
		
		or
		
		use big key
		
		clearly, inside you use doors to go from room to room. outside you could use this also... but just have objects like paths
		
		north road, south road etc.
		
		"go south" would be unambigious.
		
	################################################################
	
	
	next steps:
	
		fit ruby code into atomic units with no il-defined outsite dependencies.
		
		all outside dependencies must be via couple
			couple 'test_name'/'class_name'
		3 levels of granularity:
			~ a method
			~ a class
			~ a module
			
		except for core or meta-modular objects, all dependencies must be from this.
			- boot strap couple as superclass later!
			
			-extract modules, classes and methods while parsing.
			-create web app text editor for editing objects.
			
			allow one block of code to contain multiple methods
			
	okay, got a text area running on localhost. 
	will try it on heroku
	
	also! stumbled upon way to remove constants.
		~ now since i've determined to have a well defined module and ban monkey patching, 
				then I think I could wrap every thing in a module and it will work.
				after testing I can remove the module... and put that module inside another one, with shadowed Kernel, etc.
				
				
